# 環境変数の定義
[env]
PROFILES_DIR = "profiles"
BREWFILE_NAME = "Brewfile"
DEFAULT_PROFILE = "hm-m1-mac"

[tasks.vars]
description = "変数の値を表示"
quiet = true
run = """
echo "PROFILES_DIR    = {{env.PROFILES_DIR}}"
echo "BREWFILE_NAME   = {{env.BREWFILE_NAME}}"
echo "DEFAULT_PROFILE = {{env.DEFAULT_PROFILE}}"
"""

[tasks.brew_available]
description = "brew コマンドが利用可能か確認し、なければエラーを返す"
quiet = true
run = """
if ! command -v brew >/dev/null 2>&1; then
  echo "❌ Error: brew command not found. Please install Homebrew." >&2
  exit 1
fi
"""

[tasks.test_profile]
description = "option(name=\"profile\") だと mise の組み込み --profile オプションと衝突するため他の名前を使用すること"
run = """
echo "PROFILE={{option(name=\"profile\", default=\"default_profile\")}}"
echo "PROF={{option(name=\"prof\", default=\"default_prof\")}}"
"""

[tasks.check]
description = "指定プロファイルが存在するかを確認し、なければエラーを返す"
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
if [ -z "$PROFILE" ]; then
  echo "❌ Error: DEFAULT_PROFILE is not set in environment variables" >&2
  exit 1
fi

PROFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE"

echo "Checking profile path: $PROFILE_PATH"
if [ ! -d "$PROFILE_PATH" ]; then
  {
    echo "❌ Error: Profile directory '$PROFILE_PATH' does not exist"
    echo "   Available profiles:"
    if [ -d "{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}" ]; then
      ls -1 "{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}" | sed 's/^/   - /'
    else
      echo "   (No profiles directory found)"
    fi
  } >&2
  exit 1
fi
echo "✅ Profile $PROFILE exists"
"""

[tasks.dump]
description = "現在インストールされているパッケージをプロファイルに書き出す (Usage: mise run dump --prof <profile-name>)"
depends = ["brew_available"]
run = """
PROFILE={{arg(name="prof")}}
if [ -z "$PROFILE" ]; then
  {
    echo "❌ Error: profile name is required."
    echo "   Usage: mise run dump --prof <profile-name>"
    } >&2
  exit 1
fi
echo "🦄 Dumping current brew packages to profile: $PROFILE"
mkdir -p "{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE"
brew bundle dump --file="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}" --force
echo "✅ Dumped current packages to {{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
"""

[tasks.status_simple]
description = "現在のBrewfileと実際のPCの状態の差分を確認し、差分がある場合はsyncを促す（statusの簡易版）"
depends = ["brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
echo "🦄 Checking brew sync status for profile: $PROFILE"
if [ ! -f "$BREWFILE_PATH" ]; then
  echo "❌ Error: Brewfile not found at '$BREWFILE_PATH'" >&2
  exit 1
fi
echo "🦄 Checking packages in $BREWFILE_PATH"
if brew bundle check --file="$BREWFILE_PATH"; then
  echo "✅ All packages are in sync"
else
  {
    echo "⚠️ Some packages are not installed or up to date"
    echo ""
    echo "Run 'mise run sync --prof \"$PROFILE\"' to synchronize packages"
  } >&2
  exit 1
fi
"""

[tasks.status]
description = "Brewfileに基づき、未インストール/要アップデートのパッケージを一覧表示する"
depends = ["brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"

BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  echo "❌ Error: Brewfile not found at '$BREWFILE_PATH'" >&2
  exit 1
fi

echo "🦄 Target Brewfile: $BREWFILE_PATH"
echo ""

# ===== 未インストール（Brewfileにはあるが入っていない） =====
echo "📦 Missing (Brewfileに記載されている未インストールパッケージ）"

# brews (formula)
TMP_WANT=$(mktemp); TMP_HAVE=$(mktemp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --brews  2>/dev/null | sort -u > "$TMP_WANT"
LC_ALL=C brew list --formula 2>/dev/null | sort -u > "$TMP_HAVE"
MISSING_BREWS=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)
rm -f "$TMP_WANT" "$TMP_HAVE"

# casks
TMP_WANT=$(mktemp); TMP_HAVE=$(mktemp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --casks  2>/dev/null | sort -u > "$TMP_WANT"
LC_ALL=C brew list --cask    2>/dev/null | sort -u > "$TMP_HAVE"
MISSING_CASK=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)
rm -f "$TMP_WANT" "$TMP_HAVE"

# taps
TMP_WANT=$(mktemp); TMP_HAVE=$(mktemp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --taps   2>/dev/null | sort -u > "$TMP_WANT"
LC_ALL=C brew tap               2>/dev/null | sort -u > "$TMP_HAVE"
MISSING_TAP=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)
rm -f "$TMP_WANT" "$TMP_HAVE"

# mas (任意)
if command -v mas >/dev/null 2>&1; then
  TMP_WANT=$(mktemp); TMP_HAVE=$(mktemp)
  # Brewfile に記載の mas アプリID一覧（先頭のID）
  LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --mas 2>/dev/null | awk '{print $1}' | sort -u > "$TMP_WANT"
  # 現在インストール済みの mas アプリID一覧
  LC_ALL=C mas list 2>/dev/null | awk '{print $1}' | sort -u > "$TMP_HAVE"
  MISSING_MAS=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)
  rm -f "$TMP_WANT" "$TMP_HAVE"
fi

if [ -z "$MISSING_BREWS$MISSING_CASK$MISSING_TAP${MISSING_MAS:-}" ]; then
  echo "  (none)"
else
  [ -n "$MISSING_TAP"   ] && { echo "  Taps:";    echo "$MISSING_TAP"    | sed 's/^/    - /'; }
  [ -n "$MISSING_BREWS" ] && { echo "  Brews:";   echo "$MISSING_BREWS"  | sed 's/^/    - /'; }
  [ -n "$MISSING_CASK"  ] && { echo "  Casks:";   echo "$MISSING_CASK"   | sed 's/^/    - /'; }
  [ -n "${MISSING_MAS:-}" ] && { echo "  MAS:";   echo "$MISSING_MAS"    | sed 's/^/    - /'; }
fi
echo ""

# ===== 要アップデート（Brewfileに載っているものに限定） =====
# Brewfileに記載のセット（あとでフィルタに使用）
TMP_WANT_BREWS=$(mktemp)
TMP_WANT_CASKS=$(mktemp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --brews  2>/dev/null | sort -u > "$TMP_WANT_BREWS"
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --casks  2>/dev/null | sort -u > "$TMP_WANT_CASKS"

OUTDATED_FORMULA_RAW=$(brew outdated --formula --verbose 2>/dev/null || true)
OUTDATED_CASK_RAW=$(brew outdated --cask --greedy 2>/dev/null || true)

# 1列目（パッケージ名）を抽出して Brewfile 記載分だけに絞る
OUTDATED_FORMULA=$(
  echo "$OUTDATED_FORMULA_RAW" | awk '{print $1}' | LC_ALL=C grep -Fxf "$TMP_WANT_BREWS" || true
)
OUTDATED_CASK=$(
  echo "$OUTDATED_CASK_RAW"    | awk '{print $1}' | LC_ALL=C grep -Fxf "$TMP_WANT_CASKS" || true
)

rm -f "$TMP_WANT_BREWS" "$TMP_WANT_CASKS"

echo "🔄 Outdated (アップグレードが必要なパッケージ)"
if [ -z "$OUTDATED_FORMULA$OUTDATED_CASK" ]; then
  echo "  (none)"
else
  [ -n "$OUTDATED_FORMULA" ] && { echo "  Formula:"; printf "%s\n" "$OUTDATED_FORMULA" | sed 's/^/    - /'; }
  [ -n "$OUTDATED_CASK"    ] && { echo "  Casks:";   printf "%s\n" "$OUTDATED_CASK"    | sed 's/^/    - /'; }
fi

echo ""

# ===== サマリ & 終了コード =====
missing_count=$(
  printf "%s\n%s\n%s\n%s\n" \
    "$MISSING_TAP" "$MISSING_BREWS" "$MISSING_CASK" "${MISSING_MAS:-}" \
    | sed '/^$/d' | wc -l | awk '{print $1}'
)
outdated_count=$(
  printf "%s\n%s\n" "$OUTDATED_FORMULA" "$OUTDATED_CASK" \
    | sed '/^$/d' | wc -l | awk '{print $1}'
)

echo "📊 Summary: missing=${missing_count}, outdated=${outdated_count}"
echo "💡 Install/upgrade を実行　　　　　　　　　　　　　　　: mise run sync --prof \"$PROFILE\""
echo "🧹 Brewfileに記載がないインストール済みパッケージを確認: mise run prune_dry_run --prof \"$PROFILE\""


# Missing または Outdated があれば 1 を返す（“要対応” を終了コードで示す）
if [ "$missing_count" -gt 0 ] || [ "$outdated_count" -gt 0 ]; then
  exit 1
fi
"""

[tasks.sync]
description = "プロファイルのBrewfileに基づいてパッケージをインストール＆アップデートし、Brewfileを最新化"
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  echo "❌ Error: Brewfile not found at '$BREWFILE_PATH'" >&2
  exit 1
fi

echo ""
echo "🦄 Installing missing packages from $BREWFILE_PATH"
brew bundle install --file="$BREWFILE_PATH"

echo ""
echo "🦄 Upgrading existing packages"
brew upgrade --formula
brew upgrade --cask --greedy

brew bundle list --file="$BREWFILE_PATH" --brews | xargs brew upgrade
brew bundle list --file="$BREWFILE_PATH" --casks | xargs brew upgrade --cask --greedy

# formula の場合（Brewfile ∩ インストール済み）
comm -12 \
  <(brew bundle list --file="$BREWFILE_PATH" --brews | sort) \
  <(brew list --formula | sort) \
  | xargs brew upgrade || true

# cask の場合（Brewfile ∩ インストール済み）
comm -12 \
  <(brew bundle list --file="$BREWFILE_PATH" --casks | sort) \
  <(brew list --cask | sort) \
  | xargs brew upgrade --cask --greedy || true


echo ""
echo "🦄 Refreshing Brewfile (add newly installed packages)"
brew bundle dump --file="$BREWFILE_PATH" --force

echo "✅ Sync complete!"
"""

[tasks.prune_dry_run]
description = "Brewfile に無いパッケージの候補を確認（アンインストールはしない）"
depends = ["brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  echo "❌ Error: Brewfile not found at '$BREWFILE_PATH'" >&2
  exit 1
fi

echo "🦄 Dry-run: packages not in $BREWFILE_PATH (nothing will be uninstalled)"
brew bundle cleanup --file="$BREWFILE_PATH"
echo ""
echo "※ 上記がアンインストール候補です。実行するには 'mise run prune --prof \"$PROFILE\"' を使ってください。"
"""

[tasks.prune]
description = "Brewfile に無いパッケージを一括アンインストール（不可逆操作）"
depends = ["brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  echo "❌ Error: Brewfile not found at '$BREWFILE_PATH'" >&2
  exit 1
fi

echo "🦄 Uninstalling packages NOT listed in $BREWFILE_PATH"
brew bundle cleanup --file="$BREWFILE_PATH" --force
echo "✅ Prune complete!"
"""
