[tasks.check_env]
description = "環境変数がちゃんと設定されているか確認する"
quiet = true
hide = true
run = """
set -eu
if [ ! -e "{{env.MISE_CONFIG_ROOT}}/mise.local.toml" ]; then
  {
    printf '[env]\n'
    printf 'PROFILES_DIR="profiles"\n'
    printf 'BREWFILE_NAME="Brewfile"\n'
    printf 'DEFAULT_PROFILE=""\n'
  } > "{{env.MISE_CONFIG_ROOT}}/mise.local.toml"
  printf "🚨 '{{env.MISE_CONFIG_ROOT}}/mise.local.toml' に環境変数を設定する必要があります。\n"
  printf "🚨 必要な環境変数をデフォルトでセットしました。\n"
  printf "🚨 DEFAULT_PROFILE=\"\" に適切なプロファイル名を設定してください。\n"
  exit 1
fi
if [ -z "${DEFAULT_PROFILE:-}" ]; then
  printf "🚨 'DEFAULT_PROFILE' を '{{env.MISE_CONFIG_ROOT}}/mise.local.toml' に設定してください。\n"
  exit 1
fi
"""

[tasks.brew_available]
description = "brew コマンドが利用可能か確認し、なければエラーを返す"
quiet = true
hide = true
run = """
if ! command -v brew >/dev/null 2>&1; then
  printf "❌ Error: brew command not found. Please install Homebrew.\n" >&2
  exit 1
fi
"""

[tasks.test_profile]
description = "option(name=\"profile\") だと mise の組み込み --profile オプションと衝突するため他の名前を使用すること"
hide = true
quiet = true
run = """
printf "PROFILE={{option(name=\"profile\", default=\"default_profile\")}}\n"
printf "PROF={{option(name=\"prof\", default=\"default_prof\")}}\n"
"""

[tasks.check]
description = "指定プロファイルが存在するかを確認し、なければエラーを返す"
depends = ["check_env"]
hide = true
quiet = true
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
if [ -z "$PROFILE" ]; then
  printf "❌ Error: DEFAULT_PROFILE is not set in environment variables\n" >&2
  exit 1
fi

PROFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE"

# 成功時は無音、エラー時のみ詳細を表示する
if [ ! -d "$PROFILE_PATH" ]; then
  {
    printf "❌ Error: Profile directory '$PROFILE_PATH' does not exist\n"
    printf "   Available profiles:\n"
    if [ -d "{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}" ]; then
      ls -1 "{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}" | sed 's/^/   - /'
    else
      printf "   (No profiles directory found)\n"
    fi
  } >&2
  exit 1
fi
"""

[tasks.dump]
description = "現在インストールされているパッケージをプロファイルに書き出す (Usage: mise run dump <profile-name>)"
depends = ["check_env", "brew_available"]
run = """
PROFILE={{arg(name="prof")}}
if [ -z "$PROFILE" ]; then
  {
    echo "❌ Error: profile name is required."
    echo "   Usage: mise run dump <profile-name>"
    } >&2
  exit 1
fi
echo "🦄 Dumping current brew packages to profile: $PROFILE"
mkdir -p "{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE"
brew bundle dump --file="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}" --force
echo "✅ Dumped current packages to {{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
"""

[tasks.status_simple]
description = "現在のBrewfileと実際のPCの状態の差分を確認し、差分がある場合はsyncを促す（statusの簡易版）"
depends = ["check_env", "brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  printf "❌ Error: Brewfile not found at '$BREWFILE_PATH'\n" >&2
  exit 1
fi
printf "🦄 Checking packages in $BREWFILE_PATH\n"
if brew bundle check --file="$BREWFILE_PATH"; then
  printf "✅ All packages are in sync\n"
else
  {
    printf "⚠️ Some packages are not installed or up to date\n"
    printf "Run 'mise run sync --prof \"$PROFILE\"' to synchronize packages\n"
  } >&2
  exit 1
fi
"""

[tasks.status]
description = "Brewfileに基づき、未インストール/要アップデートのパッケージを一覧表示する"
depends = ["check_env", "brew_available"]
run = """
# POSIX 安全設定
set -eu
# bash のときだけ pipefail を有効化
if [ -n "${BASH_VERSION:-}" ]; then set -o pipefail; fi

# 使い捨ての一時ディレクトリ（終了時にまとめて削除）
TMP_DIR="$(mktemp -d 2>/dev/null || mktemp -d -t mise)"
cleanup(){ rm -rf "$TMP_DIR"; }
trap cleanup EXIT

make_tmp(){ mktemp "$TMP_DIR/tmp.XXXXXX"; }

PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"

BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  printf "❌ Error: Brewfile not found at '$BREWFILE_PATH'\n" >&2
  exit 1
fi

printf "🦄 Target Brewfile:\\033[36m $BREWFILE_PATH\\033[0m\n\n"

# ===== 未インストール（Brewfileにはあるが入っていない） =====
printf "📦 Missing (Brewfileに記載されている未インストールパッケージ）\n"

# brews (formula)
TMP_WANT=$(make_tmp); TMP_HAVE=$(make_tmp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --brews 2>/dev/null | sort -u > "$TMP_WANT"
LC_ALL=C brew list --formula 2>/dev/null | sort -u > "$TMP_HAVE"
MISSING_BREWS=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)

# casks
TMP_WANT=$(make_tmp); TMP_HAVE=$(make_tmp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --casks 2>/dev/null | sort -u > "$TMP_WANT"
LC_ALL=C brew list --cask    2>/dev/null | sort -u > "$TMP_HAVE"
MISSING_CASK=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)

# taps
TMP_WANT=$(make_tmp); TMP_HAVE=$(make_tmp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --taps 2>/dev/null | sort -u > "$TMP_WANT"
LC_ALL=C brew tap               2>/dev/null | sort -u > "$TMP_HAVE"
MISSING_TAP=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)

# mas (任意)
if command -v mas >/dev/null 2>&1; then
  TMP_WANT=$(make_tmp); TMP_HAVE=$(make_tmp)
  # Brewfile に記載の mas アプリID一覧（先頭のID）
  LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --mas 2>/dev/null | awk '{print $1}' | sort -u > "$TMP_WANT"
  # 現在インストール済みの mas アプリID一覧
  LC_ALL=C mas list 2>/dev/null | awk '{print $1}' | sort -u > "$TMP_HAVE"
  MISSING_MAS=$(LC_ALL=C comm -23 "$TMP_WANT" "$TMP_HAVE" || true)
fi

if [ -z "${MISSING_BREWS}${MISSING_CASK}${MISSING_TAP}${MISSING_MAS:-}" ]; then
  echo "  (none)"
else
  [ -n "$MISSING_TAP"   ] && { echo "  Taps:";    printf "\\033[33m$MISSING_TAP\\033[0m"   | sed 's/^/    - /'; }
  [ -n "$MISSING_BREWS" ] && { echo "  Brews:";   printf "\\033[33m$MISSING_BREWS\\033[0m" | sed 's/^/    - /'; }
  [ -n "$MISSING_CASK"  ] && { echo "  Casks:";   printf "\\033[33m$MISSING_CASK\\033[0m"  | sed 's/^/    - /'; }
  [ -n "${MISSING_MAS:-}" ] && { echo "  MAS:";   printf "\\033[33m$MISSING_MAS\\033[0m"   | sed 's/^/    - /'; }
fi
printf "\n"

# ===== 要アップデート（Brewfileに載っているものに限定） =====
# Brewfileに記載のセット（あとでフィルタに使用）
TMP_WANT_BREWS=$(make_tmp)
TMP_WANT_CASKS=$(make_tmp)
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --brews  2>/dev/null | sort -u > "$TMP_WANT_BREWS"
LC_ALL=C brew bundle list --file="$BREWFILE_PATH" --casks  2>/dev/null | sort -u > "$TMP_WANT_CASKS"

OUTDATED_FORMULA_RAW=$(LC_ALL=C brew outdated --formula --verbose 2>/dev/null || true)
OUTDATED_CASK_RAW=$(LC_ALL=C brew outdated --cask --greedy 2>/dev/null || true)

# 1列目（パッケージ名）を抽出して Brewfile 記載分だけに絞る
OUTDATED_FORMULA=$(
  echo "$OUTDATED_FORMULA_RAW" | awk '{print $1}' | LC_ALL=C grep -Fxf "$TMP_WANT_BREWS" || true
)
OUTDATED_CASK=$(
  echo "$OUTDATED_CASK_RAW"    | awk '{print $1}' | LC_ALL=C grep -Fxf "$TMP_WANT_CASKS" || true
)

echo "🔄 Outdated (アップグレードが必要なパッケージ)"
if [ -z "${OUTDATED_FORMULA}${OUTDATED_CASK}" ]; then
  echo "  (none)"
else
  [ -n "$OUTDATED_FORMULA" ] && { echo "  Formula:"; printf "\\033[33m$OUTDATED_FORMULA\\033[0m\n" | sed 's/^/    - /'; }
  [ -n "$OUTDATED_CASK"    ] && { echo "  Casks:";   printf "\\033[33m$OUTDATED_CASK\\033[0m\n"    | sed 's/^/    - /'; }
fi
printf "\n"

# ===== サマリ & 終了コード =====
missing_count=$(
  printf "%s\n%s\n%s\n%s\n" \
    "${MISSING_TAP:-}" "${MISSING_BREWS:-}" "${MISSING_CASK:-}" "${MISSING_MAS:-}" \
    | sed '/^$/d' | wc -l | awk '{print $1}'
)
outdated_count=$(
  printf "%s\n%s\n" "${OUTDATED_FORMULA:-}" "${OUTDATED_CASK:-}" \
    | sed '/^$/d' | wc -l | awk '{print $1}'
)

printf "📊 Summary: missing=${missing_count}, outdated=${outdated_count}\n"
printf "  - Install/upgrade を実行　　　　　　　　　　　　　　　:\\033[36m mise run sync --prof \"$PROFILE\"\\033[36m\n"
printf "  - Brewfileに記載がないインストール済みパッケージを確認:\\033[36m mise run prune --prof \"$PROFILE\"\\033[36m\n"
printf "  - パッケージを単体で更新する場合は\\033[36m brew upgrade (--cask) <package-name>\\033[0m\n"


# Missing または Outdated があれば 1 を返す（“要対応” を終了コードで示す）
if [ "$missing_count" -gt 0 ] || [ "$outdated_count" -gt 0 ]; then
  exit 1
fi
"""

[tasks.sync]
description = "Brewfileに基づいて install + upgrade を実行（Brewfileに変更は加えません）。--greedy でcaskの積極的アップグレードを実施します"
depends = ["check_env", "brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  printf "❌ Error: Brewfile not found at '$BREWFILE_PATH'\n" >&2
  exit 1
fi

printf "🦄 Sync: install + upgrade by Brewfile\n"
brew update
# --greedy が指定されたら、auto_updates等も含めてcaskを積極アップグレード
if {{flag(name="greedy")}}; then
  printf "🧪 Greedy upgrade for casks (including auto_updates)\n"
  brew upgrade --cask --greedy
fi
brew bundle install --file="$BREWFILE_PATH"

printf "\n✅ Sync complete!\n"
printf "Brewfileで管理されていないパッケージを削除する場合は: mise run prune --prof \"$PROFILE\"\n"
"""

[tasks.prune]
description = "Brewfile に無いパッケージを削除（デフォルトは dry-run。--apply で削除を実行）"
depends = ["check_env", "brew_available"]
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  print "❌ Error: Brewfile not found at '$BREWFILE_PATH'\n" >&2
  exit 1
fi

if {{flag(name="apply")}}; then
  mise run prune_apply -y --prof "$PROFILE"
else
  print "🦄 Dry-run: List packages NOT in $BREWFILE_PATH\n"

  TMP_OUT=$(mktemp)
  trap 'rm -f "$TMP_OUT"' EXIT
  brew bundle cleanup --file="$BREWFILE_PATH" 2>&1 | tee "$TMP_OUT"

  COUNTS=$(
    awk '
      /^Would uninstall formulae:/ {section="form"; next}
      /^Would uninstall casks:/    {section="cask"; next}
      /^Would uninstall taps:/     {section="tap"; next}
      /^Would uninstall / || /^Run `brew bundle cleanup/ { if (section) section="" }
      section && NF {counts[section]++}
      END {
        print counts["form"]+0
        print counts["cask"]+0
        print counts["tap"]+0
      }
    ' "$TMP_OUT"
  )

  FORM_COUNT=$(echo "$COUNTS" | sed -n 1p)
  CASK_COUNT=$(echo "$COUNTS" | sed -n 2p)
  TAP_COUNT=$(echo "$COUNTS" | sed -n 3p)

  if [ "$TAP_COUNT" -eq 0 ]; then
    TAP_COUNT=$(grep -c '^Would untap ' "$TMP_OUT" || true)
  fi

  TOTAL=$((FORM_COUNT + CASK_COUNT + TAP_COUNT))

  if [ "$TOTAL" -gt 0 ]; then
    printf "\n⚠️ 削除候補があります（formulae=${FORM_COUNT}, casks=${CASK_COUNT}, taps=${TAP_COUNT} / total=${TOTAL}）\n"
    printf "   実行するには: mise run prune --apply --prof \"$PROFILE\"\n"
    exit 1
  else
    printf "\n✅ 削除候補はありません（Brewfile と一致しています）\n"
  fi
fi
"""

[tasks.prune_apply]
description = "Brewfile に無いパッケージを削除（本適用）"
hide = true
depends = ["check_env", "brew_available"]
confirm = "選択したBrewfileに記載のないパッケージを削除します。よろしいですか？"
run = """
PROFILE={{option(name="prof", default=env.DEFAULT_PROFILE)}}
mise run check --prof "$PROFILE"
BREWFILE_PATH="{{env.MISE_CONFIG_ROOT}}/{{env.PROFILES_DIR}}/$PROFILE/{{env.BREWFILE_NAME}}"
if [ ! -f "$BREWFILE_PATH" ]; then
  printf "❌ Error: Brewfile not found at '$BREWFILE_PATH'\n" >&2
  exit 1
fi

printf "🦄 Uninstalling packages NOT listed in $BREWFILE_PATH\n"
brew bundle cleanup --file="$BREWFILE_PATH" --force

# （任意）依存関係として不要になったフォーミュラの自動削除
# brew autoremove

printf "✅ Prune complete!\n"
"""
