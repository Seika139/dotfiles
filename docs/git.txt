\x1b[96m┏━━━━━━━━━━━━━━━━━━\x1b[m
\x1b[96m┃ git チートシート\x1b[m
\x1b[96m┗━━━━━━━━━━━━━━━━━━\x1b[m

\x1b[93m- この太線は「けいせん」と入力して変換すると出てくる\x1b[m
\x1b[93m- 以降の黄色い文字は alias に対応している\x1b[m

\x1b[96m┃ gitignore の作成\x1b[m
$ gi macos,python,visualstudiocode,windows > */.gitignore
\x1b[94mgitignore.io\x1b[m で .gitignore をお手軽に作成する

\x1b[92m┃ git diff \x1b[93m| gd\x1b[m
--cached : addしたあとで差分を確認
--stat   : 変更量をファイル単位で確認
--stat=N : 表示するファイル名をN文字までにする。長い場合は省略する。デフォルトは80文字
-w       : 改行コードや空白を無視

\x1b[92m┃ git remote \x1b[93m| gr\x1b[m
show origin            : remoteブランチを単純参照
prune --dry-run origin : remoteブランチでは削除されているが、ローカルに参照が残っているブランチを表示
prune origin >> grp    : すでに削除されているremoteブランチのローカル参照を削除してきれいにする

\x1b[92m┃ git log [option] \x1b[93m| gl\x1b[m
gl  : git log をさらにシンプルに表示、直前10件
glr : グラフ表示
gll : ファイルごとの追加・削除行数を表示
-- "*.vue" : vueファイルの変更があるコミットのみを対象にする

\x1b[92mgit stash (save)\x1b[m        : 変更をスタッシュにプッシュする。ステージされていない新規ファイル(未追跡ファイルはスタッシュされない)
save -u                 : untrackファイル(未追跡ファイル)も含めてスタッシュ
save -k / --keep-index  : スタッシュしてもステージの状態はそのままにする
save "message"          : メッセージをつけてスタッシュする
list \x1b[92m>> gsl\x1b[m             : 退避した作業の一覧を見る
show stash@{N}          : N番目にスタッシュしたファイルの一覧を表示
stash show -p stash@{N} : N番目にスタッシュしたファイルの変更差分を表示
apply stash@{N}         : stash@{N}の作業をもとに戻す
apply stash@{N} --index : stageして退避した作業はstageされたまま戻る
drop stash@{N}          : stash@{N}の作業を消す stash@{N}を省略するとスタッシュの一番上を削除する
pop stash@{N}           : stash@{N}の作業をもとに戻すと同時に、退避作業の中から削除
clear                   : stashのリストを全て削除(要注意!)

git diff stash@{N}        : HEADとstashの差分を確認する
git diff stash@{N} [file] : ファイルの指定も可能

git remote -v           : 登録されているリモートリポジトリの確認

\x1b[92m--date=[option]\x1b[m                 : git log や git stash list などで日付を表示するときに使う
local                           : Mon Nov 23 21:26:47 2020
iso-local                       : 2020-11-23 21:26:47 +0900
relative                        : 4 months ago
format-local:'%Y/%m/%d %H:%M:%S : 2020/11/23 21:26:47 -> カスタム表示、localをつけないと世界標準時になりうる

git branch -D [branch_name]                       : ローカルのブランチを削除
git branch -m [old_branch_name] [new_branch_name] : ローカルのブランチ名を変更
git branch -m [new_branch_name]                   : 現在のローカルブランチ名を変更する
git push origin :[branch_name]                    : リモートのブランチを削除

\x1b[92mgit add [option] [filename]\x1b[m
-u / --update                  : 既にバージョン管理されている変更があったファイルをaddする。\x1b[91m新規作成されたファイルはaddされない\x1b[m
-A / --all                     : 変更があった全てのファイル
-n/ --dry-run                  : 実行内容を表示するだけで実際には実行しない
.                              : カレントディレクトリ以下のファイル
*.html *.py                    : このようにワイルドカードでの指定もできる

\x1b[92m[コンフリクトしたとき]\x1b[m
git merge --abort            : マージを中止する
git checkout --ours [file]   : チェックアウトしているブランチ側の変更を反映する
git checkout --theirs [file] : マージさせたいブランチ側の変更を反映する

\x1b[92m[過去を無かったことにしたい時]\x1b[m
git revert [commit id] : 指定したコミットIDの内容と逆の内容をコミットする。結果的にコミットをなかったことにできる。コミットの歴史を改変することはないので安心

git reset 
        
--soft  : HEAD()
--mixed :
--hard  :
