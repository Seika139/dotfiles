\x1b[96m┏━━━━━━━━━━━━━━━━━━\x1b[m
\x1b[96m┃ git チートシート\x1b[m
\x1b[96m┗━━━━━━━━━━━━━━━━━━\x1b[m

\x1b[93m- この太線は「けいせん」と入力して変換すると出てくる\x1b[m
\x1b[93m- 以降の黄色い文字は alias に対応している\x1b[m

\x1b[96m┃ エイリアスの設定\x1b[m
.gitconfig と bash/public/12_git_alias に設定している。

\x1b[96m┃ gitignore の作成\x1b[m
$ gi macos,python,visualstudiocode,windows > */.gitignore
\x1b[94mgitignore.io\x1b[m で .gitignore をお手軽に作成する

\x1b[96m┃ HEAD とは\x1b[m
現在のコミットの場所を指すポインタ。エイリアスとして \x1b[92m@\x1b[m が使用できる。
HEAD やブランチの概念は参考の記事がわかりやすい。

(参考)
- \x1b[94mhttps://qiita.com/ymzkjpx/items/00ff664da60c37458aaa\x1b[m
- \x1b[94mhttps://nebikatsu.com/6367.html/\x1b[m
- \x1b[94mhttps://www.r-staffing.co.jp/engineer/entry/20201225_1\x1b[m

\x1b[96m┃ 過去のコミットの表し方\x1b[m

\x1b[92mチルダ ~ はn世代前の親を表す\x1b[m
@~        : HEAD の親(1世代前)
@~~ / @~2 : HEAD の親の親(2世代前)
@~n       : n世代前

\x1b[92mキャレット ^ はn番目の親を表す\x1b[m
ブランチをマージすると親が複数になるのでその時に使用する。
\x1b[92mman git-rev-parse\x1b[m でドキュメントが表示されるのでそれを見ると良い。

(参考)
- \x1b[94mhttps://www.chihayafuru.jp/tech/index.php/archives/2535\x1b[m
- \x1b[94mhttps://qiita.com/chihiro/items/d551c14cb9764454e0b9\x1b[m
- \x1b[94mhttps://masuyama13.hatenablog.com/entry/2020/08/21/231120\x1b[m
- \x1b[94mhttps://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E6%A9%9F%E8%83%BD-%E3%83%96%E3%83%A9%E3%83%B3%E3%83%81%E3%81%A8%E3%81%AF\x1b[m

\x1b[96m┃ man git コマンド\x1b[m
各 git コマンドの man を調べるときは \x1b[92mman git-[command]\x1b[m とする。(例) man git-grep

\x1b[96m┃ 自作 git 拡張コマンド\x1b[m

\x1b[92mgdd author commit1 commit2 [option]\x1b[m
commit1 と commit2 の間で author が作成した差分を一覧表示する
author を - にすると author で絞り込まない
option は git diff に用いられるものが使えるが、「commit1 と commit2 の間で author が作成した差分」を渡している以上、ファイルの絞り込みはできない。

\x1b[92mgcl commit1 commit2 [option] [path]\x1b[m
commit1 と commit2 の共通祖先を探す
option は git log のオプションと同じ
path を入力することで、その path に該当するファイルが変更されたコミットだけに絞り込むことができる

\x1b[96m┃ よく使う git コマンド\x1b[m

\x1b[92mgit diff \x1b[93m| gd\x1b[m
git diff [before]..[after]   : \x1b[92mafterで追加された部分が + \x1b[91mbefore から消えた部分が - \x1b[mで表される。`..` は ` ` でも同じ。
                               片方を省略すると HEAD との差分を比較する。
git diff                     : \x1b[92m作業ディレクトリ\x1b[mと\x1b[91mステージングエリア\x1b[mの差分
git diff --cached / --staged : \x1b[92mステージングエリア\x1b[mと\x1b[91mHEAD\x1b[mの差分。つまり次にコミットされうる内容。
git diff A...B               : ドットが3つの時は\x1b[92m A と B の共通の祖先\x1b[mと \x1b[91mB\x1b[m との差分を比較する。

\x1b[01;37;90mオプション\x1b[m
-- [path]               : 対象ファイルの変更のみを表示する
--stat                      : 変更量をファイル単位で確認
--stat=[n]                  : 表示するファイル名を n 文字までにする。長い場合は省略する。デフォルトは80文字
--color-words               : 行単位ではなく、単語単位で差分を表示する
-w                          : 改行コードや空白を無視
--no-index                  : git管理対象外のファイルも含める
-U[n]                       : 変更の前後 n 行を表示する。0にすると表示されない
--diff-filter=(A|C|D|M|R|*) : \x1b[01;97mA\x1b[mdd, \x1b[01;97mC\x1b[mopied, \x1b[01;97mD\x1b[meleted, \x1b[01;97mM\x1b[modified, \x1b[01;97mR\x1b[menamed などの差分の種類でフィルタをかけられる。
                              大文字の場合はその種類だけで絞り込む。小文字の場合はその種類を除外する。詳細は man git-diffを参照。

(参考)
- \x1b[94mhttps://qiita.com/rana_kualu/items/09d2dd379019b8ef0335\x1b[m
- \x1b[94mhttps://git.command-ref.com/cmd-git-diff.html\x1b[m
- \x1b[94mhttps://qiita.com/shibukk/items/8c9362a5bd399b9c56be\x1b[m
- \x1b[94mhttps://qiita.com/yuya_presto/items/ef199e08021dea777715#2-1\x1b[m

\x1b[92mgit log [オプション] [リビジョン範囲] [[--] パス]\x1b[m

\x1b[01;37;90mリビジョン範囲\x1b[m
git log [commit]     : commit から到達できるコミットログ（履歴）を表示する。省略するとHEADからの履歴になる
git log foo bar \x1b[91m^baz\x1b[m : foo または bar から到達できるが baz から到達できないコミットログ（履歴）を表示する
git log foo..bar     : foo から bar までのコミットログを表示する。 \x1b[92mgit log ^foo bar\x1b[m と同等

\x1b[01;37;90mオプション\x1b[m
-p                             : 差分の中身を表示する。 -n や foo..bar などでログの範囲を制限しないとなぜかエラーを返す
-n / --max-count=n             : 出力するコミット数を n 個に制限する
--since=<date> --after=<date>  : 指定した日付よりも新しいコミットを表示
--until=<date> --before=<date> : 指定した日付よりも古いコミットを表示
--first-parent                 : マージコミットが表示されたら、最初の親コミットのみに従う。詳細は後述

\x1b[96m┃ 無視(ignore)されたファイル\x1b[m
git status --ignored       : ignore されているファイルが表示される
git check-ignore -v [path] : path が ignore されている原因となる設定の場所が分かる。(複数値可)

\x1b[96m┃ 消えた差分を見つける\x1b[m
　\x1b[92m--first-parent\x1b[m は「マージコミットが表示されたら最初の親コミットのみに従う」ことを利用して、
コンフリクト解消などで消えた差分を簡単に見つけることができる。
つまり特定のブランチを追跡するときに、それ以外のコミットは無視されて、マージされた時に生じた差分として表示される。
つまり、「追加したはずの差分がどこかのコンフリクト解消で誤って消えてしまった」という状況のコミットも表示されるようになる。
図で見たい場合は英語だが \x1b[94m https://marcgg.com/blog/2015/08/04/git-first-parent-log/\x1b[m がわかりやすい。
　また、差分の詳しい中身を見る場合は \x1b[92m-p -m --first-parent\x1b[m とする。

\x1b[92mgit remote \x1b[93m| gr\x1b[m
show origin            : remoteブランチを単純参照
-v                     : 登録されているリモートリポジトリを確認する
prune --dry-run origin : remoteブランチでは削除されているが、ローカルに参照が残っているブランチを表示
prune origin \x1b[93m| grpo\x1b[m    : すでに削除されているremoteブランチのローカル参照を削除してきれいにする

\x1b[92mgit log [option] \x1b[93m| gl\x1b[m
gl  : git log をさらにシンプルに表示、直前10件
glr : グラフ表示
gll : ファイルごとの追加・削除行数を表示
-- "*.vue" : vueファイルの変更があるコミットのみを対象にする


\x1b[92mgit grep\x1b[m

grep に対する git grep のメリット
1. リポジトリ内のみを検索するため、Linuxのgrepコマンドよりも検索速度が速い。
2. リポジトリ内で追跡しているファイルのみを対象に検索ができる。キャッシュなどの不要なファイルを検索しなくて済む。
3. 過去の時点のファイルの状態を検索できる。

(基本)
git grep [option] [検索条件] [tree] : tree(コミットIDやブランチ名)の時点でファイル内の該当する文字列を検索する。treeを指定しない場合はHEADの状態を検索する。
※ grep の使い方は git grep と大体同じ。詳しくは \x1b[96mhlp_grep\x1b[m を参照。検索条件での正規表現についてもこっちに記述する。

(オプション)
-i / --ignore-case            : 大文字と小文字の違いを無視する
-l                            : 検索条件を満たすファイル名のみを表示する
-c                            : 検索条件を満たすファイル名と一致した件数を表示する
--break                       : 検索結果をファイル毎に空行を入れて見やすく表示する
-n /--line-number             : 行番号を表示する。\x1b[92mgit config --global grep.lineNumber true\x1b[m で gitconfig に設定できる。
--column                      : 検索条件に一致する行の先頭から「最初に検索条件に一致する箇所の1始まりのバイトオフセット」を表示する。
                              : \x1b[92mgit config --global grep.column true\x1b[m で gitconfig に設定できる。
-[n] / -C [n] / --context [n] : 検索結果の前後 n 行を表示
-A [n] / --after-context [n]  : 検索結果の後 n 行を表示
-B [n] / --before-context [n] : 検索結果の前 n 行を表示
-- [path]                     : path 内のディレクトリを検索する
-- [:!path]                   : path 内のディレクトリを以外を検索する。[:^path] でも良い
-W / --function-context       : 関数名を含む前の行から次の関数名の前の行までのテキストを表示する。YAMLやテキストファイルでは微妙な使い味

-G / --basic-regexp           : 検索条件に基本正規表現(BRE)を使用する。デフォルトはこれ。
-F / --fixed-strings          : 検索条件を正規表現ではなく、固定文字列として解釈する。
-E / --extended-regexp        : 検索条件に拡張正規表現(ERE)を使用する。ただし `.*?` が左方最短一致ではなく最長一致にしかならない。詳細は hlp_grep を参照。

(tree と同時に指定できないオプション)
--no-index                    : git管理対象外のファイルも含める
--cached                      : ステージングエリアから検索する。
--untracked                   : ワークツリーで追跡されたファイルを検索するだけでなく、追跡されていないファイルも検索する。

(複数条件)
--and /--or / --not           : \x1b[92m-e 検索条件1 --and -e 検索条件2\x1b[m のようにして指定する。 --or は省略できる。

(参考)
- \x1b[94mhttps://www.r-staffing.co.jp/engineer/entry/20200605_1\x1b[m
- \x1b[94mhttps://tracpath.com/docs/git-grep/\x1b[m ← \x1b[94mhttps://git-scm.com/docs/git-grep\x1b[m の和訳
- \x1b[94mhttps://dev.classmethod.jp/articles/useful-git-grep-command/\x1b[m
- \x1b[94mhttps://future-architect.github.io/articles/20200611/\x1b[m


\x1b[92mgit stash (save) \x1b[93m| g ss\x1b[m : 変更をスタッシュにプッシュする。ステージされていない新規ファイル(未追跡ファイルはスタッシュされない)
                          stash@{N} は省略して \x1b[92mN\x1b[m としても良い。
save -u                 : untrackファイル(未追跡ファイル)も含めてスタッシュ
save -k / --keep-index  : スタッシュしてもステージの状態はそのままにする
save "message"          : メッセージをつけてスタッシュする
list \x1b[93m| gsl\x1b[m              : 退避した作業の一覧を見る
show stash@{N}          : N番目にスタッシュしたファイルの一覧を表示
show -p stash@{N}       : N番目にスタッシュしたファイルの変更差分を表示
apply stash@{N}         : stash@{N} の作業をもとに戻す
apply stash@{N} --index : stage して退避した作業は stage されたまま戻る
drop stash@{N}          : stash@{N} の作業を消す stash@{N} を省略するとスタッシュの一番上を削除する
pop stash@{N}           : stash@{N} の作業をもとに戻すと同時に、退避作業の中から削除
clear                   : stash のリストを全て削除(要注意!)

git diff stash@{N}        : HEADとstashの差分を確認する
git diff stash@{N} [file] : ファイルの指定も可能


\x1b[96m┃ git worktree で stash せずとも他ブランチに切り替えられる\x1b[m

\x1b[92mgit worktree [subcommand] \x1b[93m| g wk [subcommand]\x1b[m

list \x1b[93m| gwl\x1b[m : ワークツリーを次の形式で一覧表示する。\x1b[92mワークツリーへのパス コミットハッシュ 追加情報\x1b[m
             \x1b[92m追加情報\x1b[m について
             - チェックアウトされているブランチ名（存在しない場合は detached HEAD と表示される）
             - locked（ワークツリーがロックされている場合）
             - prunable（ワークツリーが prune コマンドで削除できる場合）

add <path> [<commit-ish>] : <path> にワークツリーを作成し、<commit-ish> （commit id やブランチ名）をチェックアウトする。
                            <commit-ish> を省略すると、新しいワークツリーは \x1b[92m$(basename <path>)\x1b[m にちなんで名付けられたブランチに関連付けられる。
                            関連するブランチがない場合は HEAD に基づくブランチが自動的に作成される。

remove [-f/--force] <worktree> : <worktree> を削除する。-f を使うと追跡されているファイルに変更がある場合や、新規の未追跡ファイルがある場合でも削除する。
prune                          : rmコマンドなどで物理的に削除されたワークツリーを git worktree の管理から削除する。

\x1b[96m┃ 作業中にプルリクレビューがきたときの例\x1b[m
「git worktree add review branch_name」で ./review 内に branch_name が展開される。
「cd review」でディレクトリの移動とともにブランチも移動する。review 内のファイルを見てコードレビューする。
「git worktree remove review」で不要になったワークツリーを消す。

(参考)
- \x1b[94mhttps://git-scm.com/docs/git-worktree\x1b[m
- \x1b[94mhttps://runebook.dev/ja/docs/git/git-worktree\x1b[m


\x1b[96m┃ 日付形式\x1b[m

\x1b[92m--date=[option]\x1b[m                  : git log や git stash list などで日付を表示するときに使う
local                            : Mon Nov 23 21:26:47 2020
iso-local                        : 2020-11-23 21:26:47 +0900
relative                         : 4 months ago
format-local:'%Y/%m/%d %H:%M:%S' : 2020/11/23 21:26:47 -> カスタム表示、localをつけないと世界標準時になりうる

\x1b[92mgit add [option] [filename]\x1b[m
-u / --update : 既にバージョン管理されている変更があったファイルをaddする。\x1b[91m新規作成されたファイルはaddされない\x1b[m
-A / --all    : 変更があった全てのファイル
-n/ --dry-run : 実行内容を表示するだけで実際には実行しない
.             : カレントディレクトリ以下のファイル
*.html *.py   : このようにワイルドカードでの指定もできる

\x1b[96m┃ ブランチを削除/変更する\x1b[m
git branch -D [branch_name]                       : ローカルのブランチを削除
git branch -m [old_branch_name] [new_branch_name] : ローカルのブランチ名を変更
git branch -m [new_branch_name]                   : 現在のローカルブランチ名を変更する
git push origin :[branch_name]                    : リモートのブランチを削除

\x1b[96m┃ コンフリクトしたとき\x1b[m
git merge --abort            : マージを中止する
git checkout --ours [file]   : チェックアウトしているブランチ側の変更を反映する
git checkout --theirs [file] : マージさせたいブランチ側の変更を反映する

\x1b[96m┃ 過去を無かったことにしたい時\x1b[m
\x1b[92mgit checkout [commit id] [path]\x1b[m : パスに含まれるファイルを指定したコミットIDの状態にする。一部のファイルを元に戻したいときに有効。

\x1b[92mgit revert [commit id]\x1b[m : 指定したコミットIDの内容と逆の内容をコミットする。リモートにプッシュ済みのコミットでも安全に差分を元に戻すことができる。

\x1b[92mgit reset [option] [commit id]\x1b[m : HEAD(現在のコミットid)の位置を過去のコミットidに戻す。\x1b[91mreset はリモートに push した後の状態では基本的に使わない。\x1b[m
--soft                  : HEAD の状態を戻す。\x1b[96m作業ディレクトリ/ワーキングツリー\x1b[mと\x1b[96mステージングエリア/インデックス\x1b[mはそのまま。
git reset --soft @^     : 直前のコミット内容を修正するときに使える。直前のコミット差分はステージングエリアに残る。
--mixed                 : HEAD とステージングエリアの状態を戻す。作業ディレクトリはそのまま。option を省略した場合は --mixed と解釈される
git reset --mixed @     : HEAD とステージングエリアの状態を HEAD に戻す。つまりステージングエリアのファイルが作業ディレクトリに戻るのでaddを取り消したいときに使える。
                          なお HEAD も省略できるので `git reset` だけで良い。
git reset [file name]   : 特定のファイルのaddを取り消すときはこうする。
--hard                  : HEAD、ステージングエリア、作業ディレクトリの全ての状態を戻す。\x1b[91mつまりコミットしていない変更差分は全て消えてなくなるので注意\x1b[m

reset すると HEAD の位置が過去に戻るので、リモートに push した後で reset するとリモートの方が差分が進んだ状態になる。
そのため基本的にはリモートの差分を pull してから出ないと push できない。
\x1b[91mgit push -f / --force\x1b[m で無理矢理ローカルの状態を push できるが、リモートの変更差分も完全に消えてしまう。
そうすると他の人のブランチにも影響が生じる。これが「reset は危ない」と言われる所以。
したがって「\x1b[91m複数人が開発するブランチに対して push 済みのコミットを reset しない\x1b[m」ようにすること。

(参考)
- \x1b[94mhttps://www.r-staffing.co.jp/engineer/entry/20191129_1\x1b[m
- \x1b[94mhttps://qiita.com/forest1/items/f7c821565a7a7d64d60f\x1b[m

\x1b[92mgit reflog\x1b[m       : HEADの履歴(自分が撮った操作履歴)を表示する。git reflog show HEAD のショートカット
--date=iso-local : オプションがないと時間の情報がないので --date オプションをつけておくと良い。
--all            : reflog は HEAD 以外の履歴も記録している。全ての完全なrefを見るときはこのオプションを使う

reflog は HEAD の動き（自分自身が行った行動）を履歴にしたもの。具体的には、次のものが履歴として残る。
・新規コミット（コミット、マージ、プル、リバートなど）
・ブランチの切り替え（チェックアウト）
・履歴の書き換え（リセット、リベースなど）

reset したコミットを元に戻す、削除したブランチを元に戻す、などができる。
やり方はこの記事を参照 → \x1b[94mhttps://toronavi.com/git-reflog\x1b[m

(参考)
- \x1b[94mhttps://www.r-staffing.co.jp/engineer/entry/20191227_1\x1b[94m
