description = "CHANGELOG.md を更新し、SemVer のタグを作成して git push します"

prompt = """
You are to update CHANGELOG.md and create a new semantic version tag for the current Git repository.

Follow these steps carefully:

## 1. Ensure Git Repository and CHANGELOG.md

!{if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then echo "Error: Not a Git repository."; exit 1; fi}
!{if [ ! -f CHANGELOG.md ]; then echo "Warning: CHANGELOG.md not found."; fi}

If the file is missing, suggest running the `/release:prepare` command.

## 2. Context

- Today: !{date +%Y-%m-%d}

## 3. Analyze Repository Status

!{echo "=== Repository Status ==="}
!{echo "Current branch: $(git branch --show-current)"}

!{STATUS=$(git status --porcelain);
  if [ -z "$STATUS" ]; then
    echo "Git status: Clean working directory"
  else
    echo "Git status: Uncommitted changes found"
    git status --porcelain
  fi}

!{LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0");
  echo "Latest tag: $LATEST_TAG"}

!{echo "Commits since latest tag:";
  if [ "$LATEST_TAG" != "0.0.0" ]; then
    git log "$LATEST_TAG..HEAD" --pretty=format:'- %s (%h)' | head -10
  else
    echo "- No previous tags found"
    git log --pretty=format:'- %s (%h)' | head -10
  fi}

## 4. Determine Next Version

Based on commits since the last tag, propose whether the next version should be:
- patch (bug fixes, docs)
- minor (new features, backward-compatible)
- major (breaking changes)

!{echo "Latest version: $(git describe --tags --abbrev=0 2>/dev/null || echo 0.0.0)"}

## 5. Update CHANGELOG.md

Use [Keep a Changelog](https://keepachangelog.com/ja/1.0.0/) and [Semantic Versioning](https://semver.org/lang/ja/).
Move content from the "Unreleased" section to a new version section `## [X.Y.Z] - YYYY-MM-DD`.

Ensure consistent list formatting.
If a section is empty, omit it.

**Notes:**
- Include PR/Issue numbers like (#123).
- Keep the unreleased section and version comparison links up-to-date.
- Never remove old entries.

## 6. Stage & Commit

After determining NEXT_VERSION (e.g., 1.2.3):

!{echo "Please specify the next version (e.g., 1.2.3):"}
!{read -p "Next version: " NEXT_VERSION; \
  if [ -z "$NEXT_VERSION" ]; then echo "Error: Version cannot be empty"; exit 1; fi; \
  echo "Staging CHANGELOG.md..."; git add CHANGELOG.md; \
  echo "Committing..."; git commit -m "chore(release): v$NEXT_VERSION"; \
  echo "Tagging..."; git tag "v$NEXT_VERSION"; \
  echo "Version v$NEXT_VERSION prepared for release."}

## 7. Push to Remote

!{echo "Pushing branch and tags..."; git push; git push --tags; echo "Release published successfully."}

Finally, insert a short release note (from the new CHANGELOG section) in the output.
"""
